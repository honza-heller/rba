# This is RBA
# 2012 -- 2014, Jan Heller, hellej1@cmp.felk.cvut.cz
# Inspired by ceres CMakeLists.txt

CMAKE_MINIMUM_REQUIRED(VERSION 3.0)
PROJECT(rba C CXX)

OPTION(OPENCV "Enable OpenCV" ON)
OPTION(OPENMP "Enable OpenMP" ON)
OPTION(VLFEAT "Enable VLFeat" ON)

#SET(RBA_VERSION_MAJOR 0)
#SET(RBA_VERSION_MINOR 4)
#SET(RBA_VERSION_PATCH 0)
#SET(RBA_VERSION ${RBA_VERSION_MAJOR}.${RBA_VERSION_MINOR}.${RBA_VERSION_PATCH})
#ADD_DEFINITIONS(-DRBA_VERSION="${RBA_VERSION}")

IF (NOT CMAKE_BUILD_TYPE)
  MESSAGE("-- No build type specified; defaulting to CMAKE_BUILD_TYPE=Release.")
  SET(CMAKE_BUILD_TYPE RELEASE CACHE STRING
    "Choose the type of build, options are: None Debug Release"
   FORCE)
ENDIF()

MESSAGE("Using build type ${CMAKE_BUILD_TYPE}")

#LINK_DIRECTORIES(${SEARCH_LIBS})
#INCLUDE_DIRECTORIES(${SEARCH_HEADERS})

# CXX Flags
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-missing-field-initializers")
# RBA with AVX segfaults due to some cryptic Eigen/Ceres problem... Maybe try again in a while.
SET(CMAKE_CXX_FLAGS_RELEASE "-DEIGEN_NO_DEBUG -DNDEBUG -O3 -mno-avx -mno-avx2")
SET(CMAKE_CXX_FLAGS_DEBUG "-O0 -ggdb")

IF(CMAKE_COMPILER_IS_GNUCXX)
  EXEC_PROGRAM(
      ${CMAKE_CXX_COMPILER}
      ARGS                    --version
      OUTPUT_VARIABLE _compiler_output)
  STRING(REGEX REPLACE ".* ([0-9]\\.[0-9]\\.[0-9]).*" "\\1"
        GCC_COMPILER_VERSION ${_compiler_output})
ENDIF(CMAKE_COMPILER_IS_GNUCXX)

IF (CMAKE_BUILD_TYPE STREQUAL "RELEASE")
  IF (CMAKE_COMPILER_IS_GNUCXX)
    # Linux
    IF (CMAKE_SYSTEM_NAME MATCHES "Linux")
      IF (GCC_COMPILER_VERSION VERSION_GREATER 4.2)
        SET (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -march=native -mtune=native")
      ENDIF (GCC_COMPILER_VERSION VERSION_GREATER 4.2)
    ENDIF (CMAKE_SYSTEM_NAME MATCHES "Linux")
  ENDIF (CMAKE_COMPILER_IS_GNUCXX)
ENDIF (CMAKE_BUILD_TYPE STREQUAL "RELEASE")


# OpenCV
IF(OPENCV)
    FIND_PACKAGE(OpenCV)
    IF (${OpenCV_FOUND})
        IF (${OpenCV_VERSION} VERSION_LESS 2.4.0)
            MESSAGE(FATAL_ERROR "OpenCV version is not compatible : ${OpenCV_VERSION}")
        ENDIF()
        INCLUDE_DIRECTORIES(${OpenCV_INCLUDES})
    ELSE ()
        ADD_DEFINITIONS(-DRBA_NO_OPENCV)
    ENDIF ()
ELSE (OPENCV)
    MESSAGE(WARNING "OpenCV support is disabled.")
    ADD_DEFINITIONS(-DRBA_NO_OPENCV)
ENDIF (OPENCV)
	
# Boost
FIND_PACKAGE(Boost REQUIRED COMPONENTS system filesystem thread date_time program_options)
#FIND_PACKAGE(Boost REQUIRED)
INCLUDE_DIRECTORIES(${Boost_SYSTEM_INCLUDES})

# Ceres
FIND_PACKAGE(Ceres)
INCLUDE_DIRECTORIES(${CERES_INCLUDES})

# VLFeat
IF (VLFEAT)
    FIND_PATH(VLFEAT_INCLUDE_DIR vl/generic.h)
    IF (VLFEAT_INCLUDE_DIR STREQUAL "VLFEAT_INCLUDE_DIR-NOTFOUND")
        MESSAGE(WARNING "VLFeat includes not found: please set VLFEAT_INCLUDE_DIR in order to compile with VLFeat support")  
    ELSE (VLFEAT_INCLUDE_DIR STREQUAL "VLFEAT_INCLUDE_DIR-NOTFOUND")
	INCLUDE_DIRECTORIES(${VLFEAT_INCLUDE_DIR})
        MESSAGE(STATUS "Found VLFeat include dir: " ${VLFEAT_INCLUDE_DIR})
        FIND_LIBRARY(VLFEAT_LIBRARY "vl" PATHS ${VLFEAT_LIBRARY_DIR})
        IF (VLFEAT_LIBRARY STREQUAL "VLFEAT_LIBRARY-NOTFOUND")
            MESSAGE(WARNING "VLFeat library not found: please set VLFEAT_LIBRARY_DIR in order to compile with VLFeat support")  
        ELSE (VLFEAT_LIBRARY STREQUAL "VLFEAT_LIBRARY-NOTFOUND")
	    MESSAGE(STATUS "Found VLFeat: " ${VLFEAT_LIBRARY})
        ENDIF (VLFEAT_LIBRARY STREQUAL "VLFEAT_LIBRARY-NOTFOUND")
    ENDIF (VLFEAT_INCLUDE_DIR STREQUAL "VLFEAT_INCLUDE_DIR-NOTFOUND")
ELSE (VLFEAT)
    MESSAGE(WARNING "VLFeat support is disabled.")
    ADD_DEFINITIONS(-DRBA_NO_VLFEAT)
ENDIF (VLFEAT)

# LibPNG
FIND_PACKAGE(PNG)
IF (PNG_FOUND)
    INCLUDE_DIRECTORIES(${PNG_INCLUDES})
ENDIF ()

# LibJPEG
FIND_PACKAGE(JPEG)
IF (JPEG_FOUND)
    INCLUDE_DIRECTORIES(${JPEG_INCLUDES})
ENDIF ()

# LibTIFF
FIND_PACKAGE(TIFF)
IF (TIFF_FOUND)
    INCLUDE_DIRECTORIES(${TIFF_INCLUDES})
ENDIF ()

# OpenMP
IF (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  SET(OPENMP_FOUND FALSE)
ELSE (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  IF (OPENMP)
    FIND_PACKAGE(OpenMP)
  ENDIF (OPENMP)
ENDIF (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")

IF (OPENMP_FOUND)
  IF (UNIX)
    # At least on Linux, we need pthreads to be enabled for mutex to
    # compile.  This may not work on Windows or Android.
    FIND_PACKAGE(Threads REQUIRED)
    SET(STATIC_LIBRARY_FLAGS
        "${STATIC_LIBRARY_FLAGS} ${CMAKE_THREAD_LIBS_INIT}")
    SET(CMAKE_SHARED_LINKER_FLAGS
        "${CMAKE_SHARED_LINKER_FLAGS} ${CMAKE_THREAD_LIBS_INIT}")
  ENDIF (UNIX)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
ENDIF (OPENMP_FOUND)

ADD_SUBDIRECTORY(src)
